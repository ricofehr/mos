---

- name: Logs folder
  become: true
  ansible.builtin.file:
    path: "{{ k8s_deploy_logs_folder }}"
    owner: "{{ ansible_user }}"
    state: directory
    mode: '0775'

- name: Get terraform binary file and unarchive it on the bin folder
  become: true
  ansible.builtin.unarchive:
    src: "{{ k8s_deploy_tf_download_url }}"
    dest: /usr/local/bin
    mode: '0755'
    remote_src: true

- name: OS crt folder
  become: true
  ansible.builtin.file:
    path: "{{ k8s_deploy_haproxy_ssl_crt_folder }}"
    owner: "{{ ansible_user }}"
    state: directory
    mode: '0775'

- name: Prepare openstack ssl cert
  ansible.builtin.copy:
    content: |
             {{ k8s_deploy_haproxy_ssl_crt_content | b64decode }}
    dest: "{{ k8s_deploy_haproxy_ssl_crt_path }}"
    mode: '0644'

- name: Generate ssh rsa keys for current user
  ansible.builtin.shell: |
    mkdir -p {{ ansible_env.HOME }}/.ssh
    rm -f {{ ansible_env.HOME }}/.ssh/id_rsa*
    ssh-keygen -t rsa -N "" -f {{ ansible_env.HOME }}/.ssh/id_rsa
  args:
    executable: /bin/bash
    creates: "{{ k8s_deploy_firstboot_creates_path }}"

- name: Pip3 install
  become: true
  ansible.builtin.apt:
    name: python3-pip
    state: present

- name: Ensure compliant ansible version for k8s deployment
  ansible.builtin.pip:
    name: ansible=={{ k8s_deploy_ansible_version }}
    executable: pip3
    extra_args: --user

- name: Clone k8s install repo
  ansible.builtin.git:
    repo: "{{ k8s_deploy_repo_url }}"
    version: "{{ k8s_deploy_version }}"
    dest: "{{ ansible_env.HOME }}/k8s"

- name: Define mirror registry parameter
  when: k8s_deploy_mirror_registry | length > 0
  ansible.builtin.set_fact:
    k8s_deploy_mirror_registry: "-m {{ k8s_deploy_mirror_registry }}"

- name: Debug k8s deploy cmd
  when: k8s_deploy == "1"
  ansible.builtin.copy:
    content: >
      ./deploy-to-openstack -o {{ k8s_deploy_ubuntu_os_img }} -s {{ k8s_deploy_sizing }}
      -net {{ k8s_deploy_os_private_network_id }} -snet {{ k8s_deploy_os_private_subnetwork_id }}
      -vip1 {{ k8s_deploy_managers_vip }} -fip {{ k8s_deploy_os_public_network_id }}
      -oscrt {{ k8s_deploy_haproxy_ssl_crt_path }} {{ k8s_deploy_mirror_registry }}
      {{ k8s_deploy_mirror_registry }} -w ~/.local/bin/ansible-playbook
    dest: "{{ ansible_env.HOME }}/deploy_k8s_cmd"
    mode: '0600'

- name: Deploy k8s
  when: k8s_deploy == "1"
  ansible.builtin.command: |
    ./deploy-to-openstack -o {{ k8s_deploy_ubuntu_os_img }} -s {{ k8s_deploy_sizing }} \
    -net {{ k8s_deploy_os_private_network_id }} -snet {{ k8s_deploy_os_private_subnetwork_id }} \
    -vip1 {{ k8s_deploy_managers_vip }} -fip {{ k8s_deploy_os_public_network_id }} \
    -oscrt {{ k8s_deploy_haproxy_ssl_crt_path }} {{ k8s_deploy_mirror_registry }} \
    -w ~/.local/bin/ansible-playbook
  args:
    chdir: "{{ ansible_env.HOME }}/k8s"
    creates: "{{ k8s_deploy_firstboot_creates_path }}"

...
