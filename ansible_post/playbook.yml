- hosts:
    - oscompute1
    - oscompute2
  become: yes
  tasks:
    - name: Fix br-vlan agent issue
      shell: |
        sed -i "s/^physical_interface_mappings =.*$/physical_interface_mappings = vlan:br-vlan,flat:eth2/" /etc/neutron/plugins/ml2/linuxbridge_agent.ini
        systemctl restart neutron-linuxbridge-agent
      args:
        executable: /bin/bash

- hosts: oscontroller
  become: yes
  vars:
    k8s_deploy: 0
  tasks:
    - name: Init utility container name
      shell: ls /var/lib/lxc/ | grep utility | tr -d "\n"
      register: utility_container

    - name: Neutron infra
      shell: >
        lxc-attach -n {{ utility_container.stdout }} --
        /bin/bash -c
        "source /root/openrc &&
        openstack project create tenant0 &&
        openstack user create --project tenant0 --password tenant0 tenant0 &&
        openstack role add --user tenant0 --project tenant0 _member_ &&
        openstack network create --share --project service --external --provider-network-type flat --provider-physical-network flat public &&
        openstack network create --share --project tenant0 --provider-network-type vxlan private &&
        openstack subnet create --project service --subnet-range 192.168.90.0/24 --no-dhcp --gateway 192.168.90.1 --dns-nameserver 8.8.8.8 --network public --ip-version 4 --allocation-pool start=192.168.90.100,end=192.168.90.254 192.168.90.0/24 &&
        openstack subnet create --project tenant0 --subnet-range 10.0.171.0/24 --dhcp --dns-nameserver 8.8.8.8 --network private --ip-version 4 10.0.171.0/24 &&
        openstack router create --no-ha --project tenant0 tenant0 &&
        openstack router add subnet tenant0 10.0.171.0/24 &&
        openstack router set --external-gateway public tenant0"
      args:
        executable: /bin/bash

    - name: Flavor setting
      shell: >
        lxc-attach -n {{ utility_container.stdout }} --
        /bin/bash -c
        "source /root/openrc &&
        openstack flavor create --ram 1024 --disk 20 --vcpus 1 small &&
        openstack flavor create --ram 4096 --disk 40 --vcpus 2 medium &&
        openstack flavor create --ram 6144 --disk 60 --vcpus 3 xmedium &&
        openstack flavor create --ram 8192 --disk 80 --vcpus 4 large &&
        openstack flavor create --ram 16384 --disk 120 --vcpus 6 xlarge"
      args:
        executable: /bin/bash

    - name: Security group rules setting
      shell: >
        lxc-attach -n {{ utility_container.stdout }} --
        /bin/bash -c
        "source /root/openrc &&
        eval \$(openstack project show tenant0 -c id -f shell) &&
        idsecurity=\$(openstack security group list -f csv | grep \$id | sed 's;,.*$;;' | tr -d '\"') &&
        openstack security group rule create --project tenant0 --protocol tcp --dst-port 22 --prefix 0.0.0.0/0 \$idsecurity &&
        openstack security group rule create --project tenant0 --protocol tcp --dst-port 80 --prefix 0.0.0.0/0 \$idsecurity &&
        openstack security group rule create --project tenant0 --protocol tcp --dst-port 443 --prefix 0.0.0.0/0 \$idsecurity &&
        openstack security group rule create --project tenant0 --protocol icmp --prefix 0.0.0.0/0 \$idsecurity"
      args:
        executable: /bin/bash

    - name: Quota setting
      shell: >
        lxc-attach -n {{ utility_container.stdout }} --
        /bin/bash -c
        "source /root/openrc &&
        openstack quota set --class --instances 100 --key-pairs 120 --cores 200 --ram 122880 --server-groups 120 --server-group-members 120 --gigabytes 4000 --volumes 120 --snapshots 120 default &&
        openstack quota set --ports 100 --floating-ips 100 tenant0 &&
        openstack quota set --ports 100 --floating-ips 100 service"
      args:
        executable: /bin/bash

    - name: Get xenial qcow2 image from ubuntu-cloud
      get_url:
        url: https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img
        dest: /var/lib/lxc/{{ utility_container.stdout }}/rootfs/tmp/osvm-xenial.img
        mode: 0755

    - name: Get bionic qcow2 image from ubuntu-cloud
      get_url:
        url: https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img
        dest: /var/lib/lxc/{{ utility_container.stdout }}/rootfs/tmp/osvm-bionic.img
        mode: 0755

    - name: Get CentOS7 qcow2 image from centos-cloud
      get_url:
        url: http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2
        dest: /var/lib/lxc/{{ utility_container.stdout }}/rootfs/tmp/osvm-centos7.img
        mode: 0755

    - name: Upload Glance images
      shell: >
        lxc-attach -n {{ utility_container.stdout }} --
        /bin/bash -c
        "source /root/openrc &&
        openstack image create --project tenant0 --disk-format qcow2 --file /tmp/osvm-xenial.img xenial &&
        openstack image create --project tenant0 --disk-format qcow2 --file /tmp/osvm-bionic.img bionic &&
        openstack image create --project tenant0 --disk-format qcow2 --file /tmp/osvm-centos7.img centos7 &&
        rm -f /tmp/osvm-xenial.img /tmp/osvm-bionic.img /tmp/osvm-centos7.img"
      args:
        executable: /bin/bash

    - name: K8S security group
      shell: >
        lxc-attach -n {{ utility_container.stdout }} --
        /bin/bash -c
        "source /root/openrc &&
        openstack security group create --project tenant0 k8s &&
        openstack security group rule create --project tenant0 --protocol tcp --dst-port 22 --prefix 0.0.0.0/0 k8s &&
        openstack security group rule create --project tenant0 --protocol tcp --dst-port 80 --prefix 0.0.0.0/0 k8s &&
        openstack security group rule create --project tenant0 --protocol tcp --dst-port 443 --prefix 0.0.0.0/0 k8s &&
        openstack security group rule create --project tenant0 --protocol tcp --dst-port 8001 --prefix 0.0.0.0/0 k8s &&
        openstack security group rule create --project tenant0 --protocol icmp --prefix 0.0.0.0/0 k8s &&
        openstack security group rule create --project tenant0 --protocol tcp --remote-group k8s k8s"
      when: k8s_deploy == "1"

    - name: Get public network id
      shell: >
        lxc-attach -n {{ utility_container.stdout }} --
        /bin/bash -c
        "source /root/openrc &&
        openstack network show public -c id -f value | tr -d '\n'"
      register: public_network_id
      when: k8s_deploy == "1"

    - name: Get private subnetwork id
      shell: >
        lxc-attach -n {{ utility_container.stdout }} --
        /bin/bash -c
        "source /root/openrc &&
        openstack subnet show 10.0.171.0/24 -c id -f value | tr -d '\n'"
      register: private_subnetwork_id
      when: k8s_deploy == "1"

    - name: Get haproxy ssl cert
      shell: cat /etc/ssl/certs/haproxy.cert
      register: haproxy_ssl_crt
      when: k8s_deploy == "1"

- hosts: osinstaller
  vars:
    k8s_deploy: 0
  tasks:
    - name: Download terraform
      get_url:
        url: https://releases.hashicorp.com/terraform/0.11.11/terraform_0.11.11_linux_amd64.zip
        dest: /tmp/terraform.zip
      when: k8s_deploy == "1"

    - name: Install terraform
      shell: |
        cd /tmp
        unzip terraform.zip
        mv terraform /usr/bin/
        chmod +x /usr/bin/terraform
      args:
        executable: /bin/bash
      become: yes
      when: k8s_deploy == "1"

    - name: Prepare openstack ssl cert
      copy:
        content: |
                 {{ hostvars['oscontroller']['haproxy_ssl_crt'].stdout }}
        dest: /home/vagrant/cloud.crt
      when: k8s_deploy == "1"

    - name: Install recent ansible
      shell: |
        apt update
        apt install -y software-properties-common
        apt-add-repository --yes --update ppa:ansible/ansible
        apt install -y ansible
      become: yes

    - name: generate rsa keys for current user
      shell: |
        mkdir -p /home/vagrant/.ssh
        ssh-keygen -t rsa -N "" -f /home/vagrant/.ssh/id_rsa
      when: k8s_deploy == "1"

#    - name: generate rsa keys for current user (need ansible 2.8)
#      openssh_keypair:
#        force: True

    - name: Deploy k8s
      shell: |
        cd /home/vagrant && git clone https://github.com/ricofehr/k8s
        cd k8s && git reset --hard cb276375196af9df117d && git submodule update --init >/dev/null 2>&1
        ./deployos -snet {{ hostvars['oscontroller']['private_subnetwork_id'].stdout }} -fip {{ hostvars['oscontroller']['public_network_id'].stdout }} -oscrt /home/vagrant/cloud.crt >/tmp/logk8s 2>&1
      when: k8s_deploy == "1"
