Vagrant.configure("2") do |config|
  config.ssh.username = "vagrant"
  config.ssh.insert_key = false

  config.vm.define :installer1 do |uosi|
    uosi.vm.hostname = :installer1
    uosi.vm.box = "generic/ubuntu2204"
    uosi.vm.box_version = "4.2.16"
    uosi.vm.provider :virtualbox do |virthost|
      virthost.customize ["modifyvm", :id, "--nictype1", "virtio"]
      virthost.customize ["modifyvm", :id, "--nic2", "intnet"]
      virthost.customize ["modifyvm", :id, "--nictype2", "virtio"]
      virthost.customize ["modifyvm", :id, "--nictype3", "virtio"]
      virthost.memory = 1024
      virthost.cpus = 1
    end

    uosi.vm.provider :libvirt do |virthost|
      virthost.memory = 1024
      virthost.cpus = 1
      virthost.driver = "kvm"
      virthost.disk_bus = "scsi"
    end

    uosi.vm.provider :vmware_desktop do |virthost|
      virthost.vmx["memsize"] = "1024"
      virthost.vmx["numvcpus"] = "1"
      virthost.vmx["disk.EnableUUID"] = "TRUE"
      virthost.vmx["ethernet0.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet1.connectionType"] = "hostonly"
      virthost.vmx["ethernet1.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet1.noPromisc"] = "TRUE"
      virthost.vmx["ethernet2.connectionType"] = "custom"
      virthost.vmx["ethernet2.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet2.noPromisc"] = "TRUE"
    end

    uosi.vm.provider :parallels do |virthost|
      virthost.memory = 1024
      virthost.cpus = 1
    end

    # Mgmt openstack vlan with multiples id (10 / 20), for internal flux like db, storage, messaging, ...
    uosi.vm.network :private_network, libvirt__network_name: "os_mgmt", libvirt__dhcp_enabled: false, libvirt__forward_mode: "veryisolated", ip: "192.168.80.50", netmask: "255.255.255.128", virtualbox__intnet: "os_mgmt"
    # Default input ip, used mainly for ansible reachablity
    uosi.vm.network :private_network, ip: "192.168.95.50", netmask: "255.255.255.128"
  end

  config.vm.define :infra1 do |uosc|
    uosc.vm.hostname = :infra1
    uosc.vm.box = "generic/ubuntu2004"
    uosc.vm.box_version = "4.2.16"
    uosc.vm.disk :disk, name: "disk_infra1", size: "50GB"
    uosc.vm.provider :virtualbox do |virthost|
      # Virtio adapter for all eth interfaces and ensure internal networks for openstack vlans
      virthost.customize ["modifyvm", :id, "--nictype1", "virtio"]
      virthost.customize ["modifyvm", :id, "--natsettings1", "1400,128,128,128,128"]
      virthost.customize ["modifyvm", :id, "--nic2", "intnet"]
      virthost.customize ["modifyvm", :id, "--nictype2", "virtio"]
      virthost.customize ["modifyvm", :id, "--nic3", "intnet"]
      virthost.customize ["modifyvm", :id, "--nictype3", "virtio"]
      virthost.customize ["modifyvm", :id, "--nictype4", "virtio"]
      # interfaces 2 and 3 are vlan-bridges, need promiscious mode enabled (because virtualbox dont transmit vlan id between vm)
      virthost.customize ["modifyvm", :id, "--nicpromisc2", "allow-vms"]
      virthost.customize ["modifyvm", :id, "--nicpromisc3", "allow-vms"]

      # RAM / CPU
      virthost.memory = 14336
      virthost.cpus = 2
    end

    uosc.vm.provider :libvirt do |virthost|
      virthost.memory = 14336
      virthost.cpus = 2
      virthost.driver = "kvm"
      virthost.disk_bus = "scsi"
      virthost.storage :file, size: "50G", type: "qcow2", path: "disk_infra1.img", bus: "scsi", device: "sdb", cache: "writeback", io: "threads", discard: "unmap"
    end

    uosc.vm.provider :vmware_desktop do |virthost|
      virthost.vmx["memsize"] = "14336"
      virthost.vmx["numvcpus"] = "2"
      virthost.vmx["disk.EnableUUID"] = "TRUE"
      virthost.vmx["ethernet0.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet1.connectiontype"] = "hostonly"
      virthost.vmx["ethernet1.noPromisc"] = "FALSE"
      virthost.vmx["ethernet1.virtualdev"] = "vmxnet3"
      virthost.vmx["ethernet2.connectionType"] = "hostonly"
      virthost.vmx["ethernet2.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet2.noPromisc"] = "TRUE"
      virthost.vmx["ethernet3.connectionType"] = "custom"
      virthost.vmx["ethernet3.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet3.noPromisc"] = "TRUE"
    end

    uosc.vm.provider :parallels do |virthost|
      virthost.memory = 14336
      virthost.cpus = 2
      virthost.customize ["set", :id, "--device-add", "hdd", "--size", "50000", "--iface", "sata"]
    end

    # Mgmt openstack vlan with multiples id (10 / 20), for internal flux like db, storage, messaging, ...
    uosc.vm.network :private_network, libvirt__network_name: "os_mgmt", libvirt__dhcp_enabled: false, libvirt__forward_mode: "veryisolated", ip: "192.168.80.70", netmask: "255.255.255.128", virtualbox__intnet: "os_mgmt"
    # Neutron network vlan for openstack network stacks management
    uosc.vm.network :private_network, libvirt__network_name: "os_net", libvirt__dhcp_enabled: false, libvirt__forward_mode: "veryisolated", ip: "192.168.85.70", netmask: "255.255.255.128", virtualbox__intnet: "os_net", auto_config: false
    # Default input ip, used mainly for ansible reachablity
    uosc.vm.network :private_network, ip: "192.168.95.70", netmask: "255.255.255.128"
  end

  config.vm.define :compute1 do |uosnv|
    uosnv.vm.hostname = :compute1
    uosnv.vm.box = "generic/ubuntu2004"
    uosnv.vm.box_version = "4.2.16"
    uosnv.vm.disk :disk, name: "disk_compute1", size: "200GB"
    uosnv.vm.provider :virtualbox do |virthost|
      # Virtio adapter for all eth interfaces and ensure internal networks for openstack vlans
      virthost.customize ["modifyvm", :id, "--nictype1", "virtio"]
      virthost.customize ["modifyvm", :id, "--nic2", "intnet"]
      virthost.customize ["modifyvm", :id, "--nictype2", "virtio"]
      virthost.customize ["modifyvm", :id, "--nic3", "intnet"]
      virthost.customize ["modifyvm", :id, "--nictype3", "virtio"]
      virthost.customize ["modifyvm", :id, "--nictype4", "virtio"]

      # interface 3 is vlan-bridges, need promiscious mode enabled (because virtualbox dont transmit vlan id between vm)
      virthost.customize ["modifyvm", :id, "--nicpromisc3", "allow-vms"]

      # disable dns server from host
      virthost.auto_nat_dns_proxy = false

      # RAM / CPU
      virthost.memory = 14336
      virthost.cpus = 6

      # enable nested virtualization
      virthost.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
    end

    uosnv.vm.provider :libvirt do |virthost|
      virthost.memory = 14336
      virthost.cpus = 6
      virthost.nested = true
      virthost.driver = "kvm"
      virthost.cpu_mode = "host-passthrough"
      virthost.disk_bus = "scsi"
      virthost.storage :file, size: "200G", type: "qcow2", path: "disk_compute1.img", bus: "scsi", device: "sdb", cache: "writeback", io: "threads", discard: "unmap"
    end

    uosnv.vm.provider :vmware_desktop do |virthost|
      virthost.vmx["memsize"] = "14336"
      virthost.vmx["numvcpus"] = "6"
      virthost.vmx["disk.EnableUUID"] = "TRUE"
      virthost.vmx["vmx.allowNested"] = "TRUE"
      virthost.vmx["cpuid.enable_vmx"] = "TRUE"
      virthost.vmx["cpuid.supportsMulticore"] = "TRUE"
      virthost.vmx["vhv.enable"] = "TRUE"
      virthost.vmx["virtualHW.version"] = "19"
      virthost.vmx["monitor_control.enable_paravirt"] = "TRUE"
      virthost.vmx["monitor_control.disableNMI"] = "FALSE"
      virthost.vmx["monitor.virtual_mmu"] = "hardware"
      virthost.vmx["monitor.virtual_exec"] = "hardware"
      virthost.vmx["numa.nodeAffinity"] = "TRUE"
      virthost.vmx["ethernet0.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet1.connectiontype"] = "hostonly"
      virthost.vmx["ethernet1.noPromisc"] = "TRUE"
      virthost.vmx["ethernet1.virtualdev"] = "vmxnet3"
      virthost.vmx["ethernet2.connectionType"] = "hostonly"
      virthost.vmx["ethernet2.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet2.noPromisc"] = "TRUE"
      virthost.vmx["ethernet3.connectionType"] = "custom"
      virthost.vmx["ethernet3.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet3.noPromisc"] = "TRUE"
    end

    uosnv.vm.provider :parallels do |virthost|
      virthost.memory = 14336
      virthost.cpus = 6
      virthost.customize ["set", :id, "--nested-virt", "on"]
      virthost.customize ["set", :id, "--device-add", "hdd", "--size", "200000", "--iface", "sata"]
    end

    # Mgmt openstack vlan with multiples id (10 / 20), for internal flux like db, storage, messaging, ...
    uosnv.vm.network :private_network, libvirt__network_name: "os_mgmt", libvirt__dhcp_enabled: false, libvirt__forward_mode: "veryisolated", ip: "192.168.80.75", netmask: "255.255.255.128", virtualbox__intnet: "os_mgmt"
    # Neutron network vlan for openstack network stacks management
    uosnv.vm.network :private_network, libvirt__network_name: "os_net", libvirt__dhcp_enabled: false, libvirt__forward_mode: "veryisolated", ip: "192.168.85.75", netmask: "255.255.255.128", virtualbox__intnet: "os_net", auto_config: false

    # Default input ip, used mainly for ansible reachablity
    uosnv.vm.network :private_network, :ip => "192.168.95.75", :netmask => "255.255.255.128"
  end

  config.vm.define :storage1 do |uosst|
    uosst.vm.hostname = :storage1
    uosst.vm.box = "generic/ubuntu2004"
    uosst.vm.box_version = "4.2.16"
    uosst.vm.disk :disk, name: "disk_storage1", size: "100GB"
    uosst.vm.provider :virtualbox do |virthost|
      # Virtio adapter for all eth interfaces and ensure internal networks for openstack vlans
      virthost.customize ["modifyvm", :id, "--nictype1", "virtio"]
      virthost.customize ["modifyvm", :id, "--nic2", "intnet"]
      virthost.customize ["modifyvm", :id, "--nictype2", "virtio"]
      virthost.customize ["modifyvm", :id, "--nictype3", "virtio"]

      # disable dns server from host
      virthost.auto_nat_dns_proxy = false

      # RAM / CPU
      virthost.memory = 1536
      virthost.cpus = 2
    end

    uosst.vm.provider :libvirt do |virthost|
      virthost.memory = 1536
      virthost.cpus = 2
      virthost.driver = "kvm"
      virthost.disk_bus = "scsi"
      virthost.storage :file, size: "100G", type: "qcow2", path: "disk_storage1.img", bus: "scsi", device: "sdb", cache: "writeback", io: "threads", discard: "unmap"
    end

    uosst.vm.provider :vmware_desktop do |virthost|
      virthost.vmx["memsize"] = "1536"
      virthost.vmx["numvcpus"] = "2"
      virthost.vmx["disk.EnableUUID"] = "TRUE"
      virthost.vmx["ethernet0.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet1.connectiontype"] = "hostonly"
      virthost.vmx["ethernet1.nopromisc"] = "TRUE"
      virthost.vmx["ethernet1.virtualdev"] = "vmxnet3"
      virthost.vmx["ethernet2.connectionType"] = "custom"
      virthost.vmx["ethernet2.virtualDev"] = "vmxnet3"
      virthost.vmx["ethernet2.noPromisc"] = "TRUE"
    end

    uosst.vm.provider :parallels do |virthost|
      virthost.memory = 1536
      virthost.cpus = 2
      virthost.customize ["set", :id, "--device-add", "hdd", "--size", "100000", "--iface", "sata"]
    end

    # Mgmt openstack vlan with multiples id (10 / 20), for internal flux like db, storage, messaging, ...
    uosst.vm.network :private_network, libvirt__network_name: "os_mgmt", libvirt__dhcp_enabled: false, libvirt__forward_mode: "veryisolated", ip: "192.168.80.80", netmask: "255.255.255.128", virtualbox__intnet: "os_mgmt"
    # Default input ip, used mainly for ansible reachablity
    uosst.vm.network :private_network, :ip => "192.168.95.80", :netmask => "255.255.255.128"
  end
end
